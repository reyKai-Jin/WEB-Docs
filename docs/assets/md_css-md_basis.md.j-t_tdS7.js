import{_ as s,c as l,a2 as a,o as n}from"./chunks/framework.PsyKZGSE.js";const c=JSON.parse('{"title":"CSS 基础相关","description":"","frontmatter":{},"headers":[],"relativePath":"md/css-md/basis.md","filePath":"md/css-md/basis.md","lastUpdated":1730310704000}'),e={name:"md/css-md/basis.md"};function t(h,i,p,o,d,k){return n(),l("div",null,i[0]||(i[0]=[a(`<h1 id="css-基础相关" tabindex="-1">CSS 基础相关 <a class="header-anchor" href="#css-基础相关" aria-label="Permalink to &quot;CSS 基础相关&quot;">​</a></h1><h2 id="css3-新特性" tabindex="-1">CSS3 新特性 <a class="header-anchor" href="#css3-新特性" aria-label="Permalink to &quot;CSS3 新特性&quot;">​</a></h2><ol><li>新增了选择器</li></ol><ul><li><code>:last-child</code> 匹配父元素的最后一个子元素</li><li><code>:nth-child(n)</code> 匹配父元素的第 n 个子元素</li></ul><ol start="2"><li>边框特性</li></ol><ul><li><code>border-radius</code> 圆角</li></ul><ol start="3"><li>颜色与不透明度</li></ol><ul><li><code>opacity: 0.5;</code></li><li><code>color: rgba(0, 0, 0, 0.5)</code></li></ul><ol start="4"><li>阴影</li></ol><ul><li><code>text-shadow</code> 文字阴影</li><li><code>box-shadow</code> 盒子阴影</li></ul><ol start="5"><li>transform 变形</li></ol><ul><li><code>transform: rotate(9deg)</code> 旋转</li><li><code>transform: scale(0.5)</code> 缩放</li><li><code>transform: translate(100px, 100px)</code> 位移</li></ul><ol start="6"><li>过渡与动画</li></ol><ul><li><code>transition</code> 过渡</li><li><code>animation</code> 动画</li></ul><ol start="7"><li>媒体查询</li></ol><ul><li><code>@media</code> 用来做响应式布局</li></ul><h2 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h2><ol><li>概念</li></ol><p><strong>页面渲染时，DOM 元素所采用的布局模型。</strong> 可通过 box-sizing 进行设置。</p><p>#2. 分类</p><p>根据计算宽高的区域可分为：</p><ol><li>content-box (W3C 标准盒模型)</li></ol><p>当给元素设置 width 和 height 时，只会改变 width + height。</p><ol start="2"><li>border-box (IE 盒模型)</li></ol><p>当给元素设置 width 和 height 时，会改变 width + height + padding。</p><ol start="3"><li>padding-box (浏览器未实现)</li><li>margin-box (浏览器未实现)</li></ol><h2 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h2><ol><li>概念</li></ol><p>BFC，又称为块级格式化上下文，指的是：<strong>一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。</strong></p><ol start="2"><li>触发条件（开启 BFC）</li></ol><ul><li>设置浮动，不包括 none</li><li>设置定位，absolute 或者 fixed</li><li>行内块显示模式，inline-block</li><li>设置 overflow，即 hidden，auto，scroll</li><li>表格单元格，table-cell</li></ul><ol start="3"><li>具体规则</li></ol><ul><li>BFC 是一个块级元素，块级元素在垂直方向上依次排列。</li><li>BFC 是一个独立的容器，内部元素不会影响容器外部的元素。</li><li>属于同一个 BFC 的两个盒子，外边距 margin 会发生重叠，并且取最大外边距。</li><li>计算 BFC 高度时，浮动子元素也要参与计算。</li></ul><ol start="4"><li>应用</li></ol><ul><li>阻止 margin 重叠,给盒子开启 bfc</li><li>清除浮动，给父元素开启 bfc,防止高度塌陷，因为计算 BFC 高度时，浮动子元素也要参与计算。</li><li>给标准流元素开启 bfc 阻止标准流元素被浮动元素覆盖</li></ul><h2 id="选择器权重-优先级" tabindex="-1">选择器权重&amp;优先级 <a class="header-anchor" href="#选择器权重-优先级" aria-label="Permalink to &quot;选择器权重&amp;优先级&quot;">​</a></h2><ul><li><code>!important</code> &gt; <code>行内样式</code> &gt; <code>#id</code> &gt; <code>.class</code> &gt; <code>tag</code> &gt; <code>*</code> &gt; <code>继承</code> &gt; <code>默认</code></li></ul><h2 id="元素水平、垂直居中" tabindex="-1">元素水平、垂直居中 <a class="header-anchor" href="#元素水平、垂直居中" aria-label="Permalink to &quot;元素水平、垂直居中&quot;">​</a></h2><h3 id="水平居中" tabindex="-1">水平居中 <a class="header-anchor" href="#水平居中" aria-label="Permalink to &quot;水平居中&quot;">​</a></h3><p>行内元素：</p><ul><li>text-align: center;</li></ul><p>块级元素：</p><ul><li><p>确定宽度的：</p><ol><li>margin: 0 auto;</li><li>父元素 position: relative,子元素绝对定位并设置 margin-left: -width/2</li></ol></li><li><p>不确定宽度的：</p><ol><li>display:table，margin：0 auto</li><li>display：inline-block，text-align:center</li><li>display：flex，justify-content:center</li><li>display：grid，justify-content:center</li><li>父元素 相对定位，子元素绝对定位，+transform，translateX 可以移动本身元素的 50%。</li></ol></li></ul><h3 id="垂直居中" tabindex="-1">垂直居中 <a class="header-anchor" href="#垂直居中" aria-label="Permalink to &quot;垂直居中&quot;">​</a></h3><ul><li>纯文本利用 line-height 设置于元素高度一致实现居中</li><li>通过设置父容器相对定位，子级设置绝对定位，margin 实现自适应居中</li><li>父级设置 display: flex; 子级设置 margin 为 auto 实现自适应居中</li><li>父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现</li><li>table 布局，父级通过转换成表格形式，然后子级设置 vertical-align 实现。（需要注意的是：vertical-align: middle 使用的前提条件是内联元素以及 display 值为 table-cell 的元素）</li></ul><h2 id="flex-布局" tabindex="-1">flex 布局 <a class="header-anchor" href="#flex-布局" aria-label="Permalink to &quot;flex 布局&quot;">​</a></h2><ol><li>概念</li></ol><p>Flex 是 Flexible Box 的缩写，意为**&quot;弹性布局&quot;**，用来为盒状模型提供最大的灵活性。采用 Flex 布局的元素，称为 Flex 容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;。容器默认存在两根轴：主轴和交叉轴（也叫做侧轴）。默认水平方向的为主轴，垂直方向为侧轴。</p><ol start="2"><li>容器的属性</li></ol><ul><li><code>flex-direction</code> 定义主轴的方向</li><li><code>flex-wrap</code> 定义是否换行</li><li><code>flex-flow</code> 是 flex-direction 属性和 flex-wrap 属性的简写形式</li><li><code>justify-content</code> 定义项目在主轴上的对齐方式</li><li><code>align-items</code> 定义项目在侧轴上的对齐方式</li><li><code>align-content</code> 定义换行的项目在侧轴上如何对齐</li></ul><ol start="3"><li>项目的属性</li></ol><ul><li><code>order</code> 定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</li><li><code>flex-grow</code> 定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</li><li><code>flex-shrink</code> 定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</li><li><code>flex-basis</code> 定义了在分配多余空间之前，项目占据的主轴空间。它的默认值为 auto，即项目的本来大小。</li><li><code>flex</code> 是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。</li><li><code>align-self</code> 允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。 扩展：flex: 1 代表什么含义？</li><li><code>flex-grow: 1</code>  如果存在剩余空间, 该项目会放大。</li><li><code>flex-shrink: 1</code>  如果剩余空间不足，该项目会缩小。</li><li><code>flex-basis: 0%</code>  设置为 0% 之后，即不占据主轴空间，但是因为有 flex-grow 和 flex-shrink 的设置，该项目会自动放大或缩小。</li></ul><h2 id="css3-新特性-1" tabindex="-1">CSS3 新特性 <a class="header-anchor" href="#css3-新特性-1" aria-label="Permalink to &quot;CSS3 新特性&quot;">​</a></h2><ul><li>新的选择器：</li><li>边框属性： 如 border-radius、box-shadow、border-image</li><li>背景属性： 如 background-clip、background-origin、background-size 和 background-break</li><li>文字属性：word-wrap、text-shadow、text-overflow</li><li>颜色：rgba 分为两部分，rgb 为颜色值，a 为透明度、hsla 分为四部分，h 为色相，s 为饱和度，l 为亮度，a 为透明度</li><li>transition，transform，animation，渐变，弹性布局网格布局</li></ul><h2 id="css-预处理器-sass-less-stylus" tabindex="-1">CSS 预处理器(Sass/Less/Stylus) <a class="header-anchor" href="#css-预处理器-sass-less-stylus" aria-label="Permalink to &quot;CSS 预处理器(Sass/Less/Stylus)&quot;">​</a></h2><ol><li>概念</li></ol><ul><li>CSS 预处理器定义了一种新的语言，主要是通过用一种专门的编程语言，为 CSS 添加一些编程特性，再编译生成 CSS 文件。</li><li>它可以帮助我们编写可维护的、与时俱进的代码，也可以减少需要编写的 CSS 数量，对于那些需要大量样式表和样式规则的大型用户界面是非常有帮助的。</li><li>CSS 预处理器可以更方便的维护和管理 CSS 代码，让整个网页变得更加灵活可变。</li><li>scss 和 sass 其实一样 写法有些区别 sass 类似 stylus 的简写 scss 不能简写 less 写法</li><li>CSS 选择器浏览器是 <strong>从右往左</strong> 依次解析 ，所以不建议嵌套写，要嵌套的时候层次少一点</li></ul><ol start="2"><li>功能</li></ol><ul><li><p>两种 scss 的用法 scss 和 sass sass 类似 stylus 的简写 scss 和 less 一样</p></li><li><p>可以使用变量、常量。可以定义一些公共的 scss 变量，通过配置（参考 vite 官网）在整个项目当中直接使用</p><p>注意.sass 和.scss 的后缀配置的时候语法上有区别，分号要处理好</p></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">primary-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: pink;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $primary-color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>允许 css 代码嵌套</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>混入 Mixin（复用样式）</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 定义混合 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@mixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clearfix() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    visibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 使用混合 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clearfix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">定义的混合可以带变量， 类似函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@mixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addColor($a, $b) {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  border-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#{$</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}: 1px solid $b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">使用的时候可以传递参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addColor(bottom, green);</span></span></code></pre></div><ul><li>继承</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="px、em、rem-和-vw、vh" tabindex="-1">px、em、rem 和 vw、vh <a class="header-anchor" href="#px、em、rem-和-vw、vh" aria-label="Permalink to &quot;px、em、rem 和 vw、vh&quot;">​</a></h2><p>px 是固定的像素，一旦设置了就无法因为放大而改变。em 是相对父元素设置的字体大小，rem 是相对根（HTML 根节点）元素设置的字体大小来计算</p><p>vw、vh 是视窗宽度和视窗高度，1vw 是视窗宽度的百分之一，1vh 是视窗高度的百分之一</p><p>注意：百分比是相对于父元素的，而 vw、vh 是相对于视口的，是不一样的</p>`,70)]))}const E=s(e,[["render",t]]);export{c as __pageData,E as default};
