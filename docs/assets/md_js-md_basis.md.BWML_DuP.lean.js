import{_ as s,c as a,a2 as l,o as e}from"./chunks/framework.PsyKZGSE.js";const c=JSON.parse('{"title":"Javascript 基础","description":"","frontmatter":{},"headers":[],"relativePath":"md/js-md/basis.md","filePath":"md/js-md/basis.md","lastUpdated":1730386014000}'),t={name:"md/js-md/basis.md"};function h(n,i,p,r,k,d){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="javascript-基础" tabindex="-1">Javascript 基础 <a class="header-anchor" href="#javascript-基础" aria-label="Permalink to &quot;Javascript 基础&quot;">​</a></h1><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h3><ul><li><code>string</code> 字符串</li><li><code>number</code> 数字</li><li><code>boolean</code> 布尔值</li><li><code>null</code></li><li><code>undefined</code></li><li><code>symbol</code> 唯一值接收字符串为参数</li><li><code>bigint</code> 主要用于管理很大或很小的数据（超过 <code>Number.MAX_SAFE_INTEGER</code> 或小于 <code>Number.MIN_SAFE_INTEGER</code>）</li></ul><h3 id="复杂类型" tabindex="-1">复杂类型 <a class="header-anchor" href="#复杂类型" aria-label="Permalink to &quot;复杂类型&quot;">​</a></h3><ul><li><code>Objec</code> 对象</li><li><code>Array</code> 数组</li><li><code>Function</code> 函数</li><li><code>RegExp</code> 正则表达式</li><li><code>Date</code> 日期</li><li><code>Set</code> 集合 类似数组成员唯一，允许你储存任何类型的唯一值，不会有隐式转换</li><li><code>Map</code> 映射 类似对象，键值可以是任意类型，具有极快的查找速度</li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><h3 id="声明" tabindex="-1">声明 <a class="header-anchor" href="#声明" aria-label="Permalink to &quot;声明&quot;">​</a></h3><p>let 与 const 有独立块级作用域</p><ul><li><code>var</code> 变量会提升 值可修改 申明不赋值可访问(undefined)</li><li><code>let</code> 不会提升 值可修改 申明不赋值可访问(undefined)(无提升所以在输出后进行定义也会报错 ReferenceError)</li><li><code>const</code> 不会提升 值不可修改 暂时性死区直接报错 ReferenceError <em>这个声明为常量</em></li></ul><h3 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h3><h4 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h4><p>是什么：作用域是变量起作用的范围或者区域</p><p>分类：</p><ul><li>全局作用域</li><li>函数作用域</li><li>块级作用域</li></ul><p>块级作用域：非函数的花括号才能形成，遇到 let 和 const</p><p>作用域是虚拟的，看不见摸不着也打印不出来，代码写完就有了（定义完成就形成了）</p><h4 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h4><p>隔离变量，防止变量污染</p><h3 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h3><p>是什么：</p><p>​ 程序查找变量的一个过程(找不到就报错-引用错误)，它是真实存在的，本质是一个数组，数组里面存储的各个执行上下文的变量对象</p><p>变量对象是从内到外的函数执行时所形成的执行上下文当中的变量对象 [最内部的变量对象 local，中间的变量对象，...，最外部的函数,global]</p><p>为什么：</p><p>​ 查找变量，给变量赋值 读取变量值去使用</p><p>注意：</p><p>​ 作用域是虚拟的，代码写完或者函数定义完成即行</p><p>​ 作用域链是函数调用的时候才形成,真实存在的</p><h2 id="和-有什么区别" tabindex="-1">== 和 ===有什么区别 <a class="header-anchor" href="#和-有什么区别" aria-label="Permalink to &quot;== 和 ===有什么区别&quot;">​</a></h2><p>== 只比较值，不比较类型，会有隐式转换发生</p><ul><li>两边的类型是否相同，相同的话就比较值的大小，例如 1==2，返回 false</li><li>判断的是否是 null 和 undefined，是的话就返回 true</li><li>判断的类型是否是 String 和 Number，是的话，把 String 类型转换成 Number，再进行比较</li><li>判断其中一方是否是 Boolean，是的话就把 Boolean 转换成 Number，再进行比较</li><li>如果其中一方为 Object，且另一方为 String、Number 或者 Symbol，会将 Object 转换成字符串，再进行比较,例：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[object Object]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span></code></pre></div><p>=== 叫做严格相等，是指：左右两边不仅值要相等，类型也要相等</p><h2 id="math-floor-和-parseint" tabindex="-1">Math.floor 和 parseInt <a class="header-anchor" href="#math-floor-和-parseint" aria-label="Permalink to &quot;Math.floor 和 parseInt&quot;">​</a></h2><p>Math.floor() 向下取整，返回小于或等于一个给定数字的最大整数</p><p>parseInt() 负数会向上取整，正数会向下取整，会忽略数字后面的非数字字符串</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//-5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//-4</span></span></code></pre></div>`,37)]))}const E=s(t,[["render",h]]);export{c as __pageData,E as default};
